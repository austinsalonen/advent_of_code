defmodule Day03Test do
  use ExUnit.Case

  @w1 [{:R, 992},{:U, 221},{:L, 822},{:U, 805},{:R, 667},{:D, 397},{:L, 969},{:U, 433},{:R, 918},{:D, 517},{:L, 494},{:U, 909},{:L, 224},{:D, 738},{:R, 247},{:D, 312},{:L, 803},{:D, 656},{:L, 571},{:D, 968},{:L, 392},{:D, 332},{:L, 581},{:U, 487},{:R, 522},{:D, 780},{:L, 74},{:D, 561},{:L, 246},{:U, 380},{:L, 125},{:U, 11},{:R, 735},{:D, 761},{:R, 482},{:D, 208},{:R, 985},{:D, 991},{:L, 352},{:U, 140},{:L, 586},{:D, 492},{:L, 777},{:U, 96},{:R, 682},{:D, 969},{:R, 775},{:U, 279},{:R, 671},{:D, 423},{:R, 838},{:U, 907},{:L, 486},{:D, 702},{:L, 432},{:D, 625},{:R, 463},{:U, 559},{:R, 12},{:D, 531},{:R, 510},{:D, 347},{:R, 147},{:U, 949},{:R, 175},{:U, 160},{:L, 975},{:D, 627},{:L, 537},{:D, 343},{:L, 406},{:D, 237},{:R, 953},{:U, 725},{:L, 996},{:D, 740},{:L, 703},{:D, 996},{:R, 157},{:U, 356},{:R, 247},{:D, 541},{:L, 592},{:D, 345},{:R, 580},{:U, 656},{:R, 50},{:D, 423},{:L, 158},{:U, 502},{:L, 86},{:U, 729},{:L, 720},{:D, 464},{:R, 901},{:D, 739},{:L, 20},{:U, 21},{:R, 497},{:D, 14},{:L, 580},{:U, 610},{:L, 114},{:D, 858},{:R, 853},{:U, 550},{:L, 354},{:D, 433},{:L, 507},{:U, 144},{:R, 9},{:U, 422},{:R, 674},{:U, 604},{:R, 107},{:D, 999},{:L, 420},{:U, 675},{:R, 538},{:D, 491},{:R, 84},{:D, 158},{:R, 303},{:D, 450},{:L, 616},{:U, 938},{:L, 162},{:U, 102},{:L, 160},{:U, 275},{:L, 281},{:D, 164},{:L, 254},{:U, 103},{:R, 60},{:D, 707},{:R, 655},{:U, 128},{:L, 907},{:U, 225},{:L, 292},{:U, 919},{:R, 517},{:D, 276},{:R, 308},{:D, 113},{:L, 455},{:U, 584},{:R, 899},{:U, 321},{:L, 417},{:U, 449},{:L, 780},{:U, 387},{:L, 579},{:U, 224},{:L, 192},{:D, 325},{:L, 626},{:U, 145},{:R, 178},{:D, 162},{:L, 18},{:D, 469},{:R, 169},{:U, 694},{:R, 162},{:D, 806},{:L, 10},{:U, 979},{:L, 944},{:D, 304},{:R, 719},{:D, 253},{:L, 343},{:D, 711},{:R, 429},{:D, 933},{:R, 445},{:D, 772},{:R, 230},{:D, 407},{:R, 335},{:U, 883},{:L, 900},{:D, 377},{:R, 413},{:D, 44},{:R, 805},{:D, 378},{:R, 421},{:D, 860},{:L, 597},{:U, 63},{:L, 583},{:D, 561},{:R, 235},{:D, 502},{:L, 37},{:U, 29},{:L, 381},{:U, 803},{:R, 588},{:D, 972},{:R, 678},{:D, 223},{:L, 440},{:U, 835},{:R, 88},{:D, 16},{:R, 529},{:D, 867},{:R, 742},{:U, 25},{:R, 353},{:D, 952},{:R, 31},{:D, 202},{:R, 737},{:D, 744},{:R, 765},{:U, 154},{:L, 969},{:U, 851},{:L, 22},{:U, 165},{:L, 12},{:D, 457},{:R, 635},{:U, 829},{:L, 996},{:D, 871},{:L, 397},{:U, 995},{:R, 215},{:D, 505},{:R, 93},{:U, 12},{:R, 183},{:D, 920},{:L, 442},{:D, 393},{:L, 919},{:D, 803},{:R, 22},{:D, 806},{:R, 776},{:U, 558},{:R, 263},{:D, 222},{:R, 111},{:D, 530},{:L, 908},{:D, 640},{:R, 351},{:D, 172},{:R, 315},{:U, 731},{:R, 25},{:U, 718},{:L, 172},{:D, 145},{:L, 606},{:U, 803},{:R, 837},{:U, 310},{:L, 607},{:D, 523},{:R, 271},{:U, 927},{:R, 3},{:U, 518},{:R, 754},{:D, 322},{:L, 924},{:D, 256},{:L, 997},{:U, 153},{:L, 904},{:D, 745},{:L, 475},{:U, 346},{:L, 979},{:D, 658},{:R, 208},{:U, 924},{:L, 484},{:U, 961},{:R, 94},{:D, 283},{:L, 79},{:U, 927},{:R, 122},{:D, 513},{:L, 806},{:D, 480},{:L, 971},{:U, 340},{:R, 328},{:D, 427},{:L, 494}]
  @w2 [{:L, 998},{:U, 308},{:R, 889},{:D, 471},{:R, 719},{:U, 326},{:L, 6},{:U, 802},{:L, 608},{:U, 149},{:R, 454},{:U, 6},{:R, 837},{:U, 255},{:L, 720},{:D, 60},{:L, 426},{:D, 525},{:L, 190},{:U, 995},{:R, 676},{:U, 172},{:R, 910},{:U, 645},{:R, 249},{:D, 725},{:R, 355},{:U, 668},{:L, 988},{:U, 253},{:L, 820},{:D, 266},{:R, 836},{:D, 750},{:R, 998},{:U, 113},{:L, 502},{:U, 634},{:L, 620},{:U, 903},{:L, 542},{:D, 426},{:L, 497},{:D, 766},{:R, 930},{:U, 415},{:R, 655},{:D, 676},{:L, 694},{:D, 548},{:L, 280},{:U, 895},{:L, 899},{:U, 235},{:R, 912},{:D, 257},{:R, 161},{:D, 834},{:R, 88},{:D, 379},{:L, 723},{:U, 508},{:L, 604},{:D, 1},{:R, 706},{:D, 321},{:R, 725},{:U, 986},{:R, 52},{:D, 741},{:L, 738},{:D, 810},{:R, 595},{:U, 352},{:L, 835},{:D, 712},{:R, 797},{:D, 332},{:L, 451},{:D, 145},{:L, 608},{:U, 940},{:R, 886},{:D, 945},{:R, 929},{:D, 4},{:R, 332},{:D, 303},{:L, 877},{:D, 927},{:R, 686},{:U, 762},{:L, 588},{:D, 496},{:R, 352},{:D, 516},{:R, 355},{:D, 299},{:L, 459},{:D, 831},{:R, 9},{:U, 322},{:R, 635},{:U, 895},{:L, 127},{:U, 27},{:R, 996},{:D, 491},{:L, 360},{:U, 921},{:L, 146},{:U, 833},{:L, 420},{:D, 60},{:R, 32},{:D, 936},{:R, 815},{:D, 451},{:R, 715},{:U, 570},{:R, 889},{:D, 35},{:R, 135},{:U, 814},{:L, 559},{:D, 141},{:L, 470},{:U, 410},{:L, 711},{:D, 668},{:L, 196},{:U, 42},{:R, 989},{:U, 448},{:L, 875},{:U, 417},{:R, 554},{:U, 61},{:R, 259},{:D, 111},{:L, 177},{:D, 147},{:L, 925},{:D, 427},{:R, 911},{:U, 667},{:L, 209},{:U, 641},{:L, 516},{:U, 521},{:R, 373},{:D, 165},{:L, 91},{:U, 594},{:R, 968},{:U, 536},{:L, 694},{:U, 270},{:R, 602},{:U, 92},{:L, 158},{:U, 321},{:R, 422},{:D, 851},{:L, 73},{:D, 492},{:L, 698},{:D, 950},{:L, 988},{:U, 48},{:L, 184},{:D, 99},{:R, 67},{:D, 168},{:R, 269},{:D, 918},{:L, 645},{:D, 736},{:L, 597},{:U, 104},{:L, 427},{:U, 72},{:R, 568},{:D, 749},{:R, 16},{:U, 190},{:L, 146},{:D, 911},{:L, 820},{:D, 275},{:R, 12},{:U, 402},{:R, 461},{:D, 595},{:L, 103},{:D, 326},{:R, 948},{:U, 288},{:L, 1},{:D, 786},{:R, 698},{:D, 286},{:L, 557},{:U, 283},{:R, 278},{:U, 327},{:R, 457},{:D, 136},{:L, 878},{:D, 23},{:L, 371},{:U, 836},{:R, 987},{:U, 695},{:R, 904},{:U, 395},{:R, 869},{:U, 276},{:R, 310},{:D, 843},{:L, 994},{:D, 209},{:R, 554},{:U, 653},{:L, 924},{:U, 659},{:R, 695},{:U, 779},{:L, 427},{:U, 504},{:R, 711},{:D, 679},{:R, 191},{:D, 775},{:R, 816},{:D, 293},{:L, 415},{:D, 323},{:R, 505},{:U, 154},{:R, 966},{:U, 446},{:R, 837},{:U, 707},{:L, 591},{:D, 593},{:L, 696},{:U, 168},{:R, 35},{:U, 905},{:R, 141},{:U, 708},{:L, 772},{:D, 898},{:R, 254},{:U, 612},{:R, 934},{:U, 114},{:R, 912},{:D, 576},{:L, 721},{:D, 965},{:R, 731},{:U, 737},{:R, 494},{:D, 760},{:R, 909},{:D, 244},{:R, 662},{:D, 863},{:L, 23},{:D, 298},{:L, 234},{:D, 476},{:L, 571},{:D, 786},{:L, 48},{:U, 960},{:L, 377},{:U, 134},{:R, 335},{:D, 453},{:R, 203},{:D, 120},{:L, 27},{:U, 365},{:R, 254},{:U, 446},{:R, 738},{:D, 919},{:L, 42},{:U, 529},{:R, 31},{:D, 104},{:R, 583},{:U, 272},{:R, 867},{:U, 834},{:L, 43},{:D, 220},{:R, 424}]

  test "first example" do
    w1 = [{:R, 8},{:U, 5},{:L, 5},{:D, 3}]
    w2 = [{:U, 7},{:R, 6},{:D, 4},{:L, 4}]

    assert 6 == distance(closest_intersection(w1, w2))

    assert 30 == fewest_steps(w1, w2)
  end

  test "second example" do
    w1 = [{:R, 75},{:D, 30},{:R, 83},{:U, 83},{:L, 12},{:D, 49},{:R, 71},{:U, 7},{:L, 72}]
    w2 = [{:U, 62},{:R, 66},{:U, 55},{:R, 34},{:D, 71},{:R, 55},{:D, 58},{:R, 83}]

    assert 159 == distance(closest_intersection(w1, w2))

    assert 610 == fewest_steps(w1, w2)
  end

  test "third example" do
    w1 = [{:R, 98},{:U, 47},{:R, 26},{:D, 63},{:R, 33},{:U, 87},{:L, 62},{:D, 20},{:R, 33},{:U, 53},{:R, 51}]
    w2 = [{:U, 98},{:R, 91},{:D, 20},{:R, 16},{:D, 67},{:R, 40},{:U, 7},{:R, 15},{:U, 6},{:R, 7}]

    assert 135 == distance(closest_intersection(w1, w2))

    assert 410 == fewest_steps(w1, w2)
  end

  test "moving" do
    assert [{2, 0}, {1, 0}, {0, 0}] == points({:R, 2}, [{0,0}])
  end

  test "part 1" do
    IO.inspect("Day 03, part 1 = " <> to_string(distance(closest_intersection(@w1, @w2))))
  end

  test "part 2" do
    IO.inspect("Day 03, part 2 = " <> to_string(fewest_steps(@w1, @w2)))
  end

  def distance({a, b}), do: abs(a) + abs(b)

  def closest_intersection(w1, w2) do
    intersections(w1, w2)
    |> Enum.min_by(&distance/1)
  end

  def fewest_steps(w1, w2) do
    ps1 = points(w1)
    ps2 = points(w2)

    intersections(w1, w2)
    |> Enum.map(&steps_to(&1, ps1, ps2))
    |> Enum.min()
  end

  def steps_to(pt, w1, w2) do
    Enum.find_index(w1, &(&1 == pt)) + Enum.find_index(w2, &(&1 == pt))
  end

  def intersections(w1, w2) do
    MapSet.intersection(w1 |> points() |> MapSet.new(), w2 |> points() |> MapSet.new())
    |> MapSet.delete({0,0})
  end

  def points(xs) do
    xs 
    |> Enum.reduce([{0,0}], &points/2)
    |> Enum.reverse()
  end

  def points({:R, n}, [{x, y} | _] = pts) do
    ps = for dx <- 1..n, do: {x + dx, y}
    (ps |> Enum.reverse()) ++ pts
  end

  def points({:L, n}, [{x, y} | _] = pts) do
    ps = for dx <- 1..n, do: {x - dx, y}
    (ps |> Enum.reverse()) ++ pts
  end

  def points({:U, n}, [{x, y} | _] = pts) do
    ps = for dy <- 1..n, do: {x, y + dy}
    (ps |> Enum.reverse()) ++ pts
  end

  def points({:D, n}, [{x, y} | _] = pts) do
    ps = for dy <- 1..n, do: {x, y - dy}
    (ps |> Enum.reverse()) ++ pts
  end

  def points(_, xs), do: xs
end